[{"C:\\codeworkspace\\cloud-single-page-website\\src\\index.js":"1","C:\\codeworkspace\\cloud-single-page-website\\src\\App.js":"2","C:\\codeworkspace\\cloud-single-page-website\\src\\reportWebVitals.js":"3","C:\\codeworkspace\\cloud-single-page-website\\src\\stringSplit.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":2873,"mtime":1610401840924,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":1154,"mtime":1610398281827,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1nnm43j",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\codeworkspace\\cloud-single-page-website\\src\\index.js",[],["20","21"],"C:\\codeworkspace\\cloud-single-page-website\\src\\App.js",["22"],"C:\\codeworkspace\\cloud-single-page-website\\src\\reportWebVitals.js",[],"C:\\codeworkspace\\cloud-single-page-website\\src\\stringSplit.js",["23"],"function splitter(str) {\r\n  var counts = {};\r\n  var keys = [];\r\n  var countString = \"\";\r\n  var wordsLength = 0;\r\n\r\n  const allwords = str.replace(/(\\n)/gm, \"\");\r\n  const words = allwords.split(/\\W+/);\r\n\r\n  //Check every word and their number\r\n  for (var i = 0; i < words.length; i++) {\r\n    var word = words[i].toLowerCase();\r\n    if (word.length > 1) {\r\n      if (counts[word] === undefined) {\r\n        counts[word] = 1;\r\n        keys.push(word);\r\n      } else {\r\n        counts[word] = counts[word] + 1;\r\n      }\r\n      wordsLength++;\r\n    }\r\n  }\r\n\r\n  //Sort keys\r\n  keys.sort(compare);\r\n\r\n  function compare(a, b) {\r\n    var countA = counts[a];\r\n    var countB = counts[b];\r\n    return countB - countA;\r\n  }\r\n  var all = [];\r\n\r\n  //Create whole string for words and counts\r\n  for (var k = 0; k < keys.length; k++) {\r\n    var key = keys[k];\r\n    countString = countString + key + \" \" + counts[key] + \"\\n\";\r\n    all.push([key, counts[key]]);\r\n  }\r\n\r\n  const result =\r\n    \"Length of all words = \" +\r\n    wordsLength +\r\n    \"\\nLength of unique words = \" +\r\n    keys.length +\r\n    \"\\n\" +\r\n    countString;\r\n\r\n  return all;\r\n}\r\n\r\nexport default splitter;\r\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":13},{"ruleId":"28","severity":1,"message":"32","line":41,"column":9,"nodeType":"30","messageId":"31","endLine":41,"endColumn":15},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]